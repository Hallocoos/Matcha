import * as mysql from 'mysql';

var con = mysql.createConnection({
  host: "localhost",
  user: "matcha",
  password: "matcha"
});

con.connect(function(err) {
  if (err) throw err;
  console.log("Connected!");
});

export default app;





import express from 'express';
import { Request, Response } from 'express';
import mongodb from 'mongodb';
import { connect } from 'mongodb';
import { config } from 'dotenv';
const ObjectId = require('mongodb').ObjectId;
type ObjectId = typeof import('mongodb').ObjectId;
const util = require('util');

const router = express.Router();

/**
 *
 * @apiName {Name of frontend 'function'that call this route}
 * @apiDescription {}
 * @apiMethod {METHOD}
 * @apiRoute /{route}
 *
 * @apiParamFormat {type} Param Format:
 * {}
 * @apiParamExample {type} Param Example:
 * {}
 * @apiSuccessExample {type} Success-Response:
 * {}
 */

router.post('/auth/route', (request: Request, response: Response) => {
  const query = ;
  connect(`mongodb://${process.env.MONGO_DB_URL}:27017`, { useNewUrlParser: true, useUnifiedTopology: true }, (err, client) => {
    if (!err) {
      const dbName = client.db(process.env.MONGO_DB);
      try {
        dbName.collection({ collection }).query(query).toArray((err, data) => {
          if (!err && data !== undefined && data.length > 0)
            response.send(data);
          else
            response.send(err);
        });
      } catch (e) {
        response.send(e);
      }
    } else {
      response.send(err);
    }
    client.close();
  })
});

// setUsersAsMatched - Link 2 users as matched, sets distance between users, matching tags
// sortMatchesByIdAndCategory - Will find all matches for a specific users ID, sort by a category and returns possible matches
// for tags: https://docs.mongodb.com/manual/reference/operator/aggregation/setIntersection/
// BlockMatch - Sets a boolean value in currently matched duo that represents that they can no longer be matched and can't talk

// findUserImagesById - Finds all user's images by ID
// upsertImage - Upserts an image

export default router;
